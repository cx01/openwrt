From 22396a500f20f0acd65cb4ad69e20b84d7dd323b Mon Sep 17 00:00:00 2001
From: Robert Marko <robimarko@gmail.com>
Date: Thu, 15 Aug 2019 00:13:12 +0200
Subject: [PATCH] ipq40xx: essedma: Add PHY reset GPIO support

Some devices like Netgear WAC510 require PHYs to be reset by pulling a GPIO high
after boot in order for networking and network LEDs to work properly.
So lets introduce a simple phy-reset-gpio property to support it.

Signed-off-by: Robert Marko <robimarko@gmail.com>
---
 phy/mdio-ipq40xx.c | 55 ++++++++++++++++++++++++++++++++++++++++++++--
 1 file changed, 53 insertions(+), 2 deletions(-)

diff --git a/phy/mdio-ipq40xx.c b/phy/mdio-ipq40xx.c
index a686506..2c7acd6 100644
--- a/phy/mdio-ipq40xx.c
+++ b/phy/mdio-ipq40xx.c
@@ -22,6 +22,7 @@
 #include <linux/of_mdio.h>
 #include <linux/phy.h>
 #include <linux/platform_device.h>
+#include <linux/of_gpio.h>
 
 #define MDIO_CTRL_0_REG		0x40
 #define MDIO_CTRL_1_REG		0x44
@@ -47,7 +48,7 @@ static int ipq40xx_mdio_wait_busy(struct ipq40xx_mdio_data *am)
 {
 	int i;
 
-	for (i = 0; i < IPQ40XX_MDIO_RETRY; i++) {
+	for (i = 0; i < IPQ40XX_MDIO_RETRY; i) {
 		unsigned int busy;
 
 		busy = readl(am->membase + MDIO_CTRL_4_REG) &
@@ -121,11 +122,61 @@ static int ipq40xx_mdio_write(struct mii_bus *bus, int mii_id, int regnum,
 	return 0;
 }
 
+static int ipq40xx_phy_reset(struct platform_device *pdev)
+{
+	struct device_node *mdio_node;
+	int phy_reset_gpio_number;
+	int ret;
+
+	mdio_node = of_find_node_by_name(NULL, "mdio");
+	if (!mdio_node) {
+		dev_err(&pdev->dev, "Could not find mdio node\n");
+		return -ENOENT;
+	}
+
+	ret = of_get_named_gpio(mdio_node, "phy-reset-gpio", 0);
+	if (ret < 0) {
+		dev_warn(&pdev->dev, "Could not find DT gpio phy-reset-gpio missing/malformed:%d\n",ret);
+		ret = 0;
+		return ret;
+	}
+
+	phy_reset_gpio_number = ret;
+
+	ret = gpio_request(phy_reset_gpio_number, "phy-reset-gpio");
+	if (ret) {
+		dev_err(&pdev->dev, "Can't get phy-reset-gpio %d\n", ret);
+		return ret;
+	}
+
+	ret = gpio_direction_output(phy_reset_gpio_number, 0x0);
+	if (ret) {
+		dev_err(&pdev->dev,
+			"Can't set direction for phy-reset-gpio %d\n", ret);
+		goto phy_reset_out;
+	}
+
+	usleep_range(1000, 10005);
+
+	gpio_set_value(phy_reset_gpio_number, 0x01);
+
+phy_reset_out:
+	gpio_free(phy_reset_gpio_number);
+
+	return ret;
+}
+
 static int ipq40xx_mdio_probe(struct platform_device *pdev)
 {
 	struct ipq40xx_mdio_data *am;
 	struct resource *res;
-	int i;
+	int i, ret;
+
+	ret = ipq40xx_phy_reset(pdev);
+	if (ret) {
+		dev_err(&pdev->dev, "Could not find qca8075 reset gpio\n");
+		return ret;
+	}
 
 	am = devm_kzalloc(&pdev->dev, sizeof(*am), GFP_KERNEL);
 	if (!am)
-- 
2.21.0

